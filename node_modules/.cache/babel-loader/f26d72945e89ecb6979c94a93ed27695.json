{"ast":null,"code":"var _jsxFileName = \"/Users/manojkumareluri/Desktop/React/react-task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []); //fetch data\n\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5000/tasks');\n    const data = await res.json();\n    return data;\n  }; //Delete Task\n\n\n  const deleteTask = async id => {\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'DELETE'\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  }; //Toggle Reminder\n\n\n  const toggleReminder = id => {\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: !task.reminder\n    } : task));\n  }; //Add task\n\n\n  const addTask = async task => {\n    /*const id = Math.floor(Math.random()*10000)+1\n    const newTask = {id, ...task}\n    setTasks([...tasks, newTask])*/\n    const res = await fetch('http://localhost:5000/tasks', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAdd: () => setShowAddTask(!showAddTask),\n      showAdd: showAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 23\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToggle: toggleReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }, this) : 'No tasks to show']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"pA4snfDjny2P+O1a+6NjXQ6HzBU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/manojkumareluri/Desktop/React/react-task-tracker/src/App.js"],"names":["useState","useEffect","Header","Tasks","AddTask","App","showAddTask","setShowAddTask","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","res","fetch","data","json","deleteTask","id","method","filter","task","toggleReminder","map","reminder","addTask","headers","body","JSON","stringify","length"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;;;AACA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACAC,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMS,QAAQ,GAAG,YAAW;AACxB,YAAMC,eAAe,GAAG,MAAMC,UAAU,EAAxC;AACAH,MAAAA,QAAQ,CAACE,eAAD,CAAR;AAEH,KAJD;;AAKAD,IAAAA,QAAQ;AACT,GAPQ,EAOP,EAPO,CAAT,CAHa,CAYb;;AACA,QAAME,UAAU,GAAG,YAAW;AAC5B,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACA,WAAOD,IAAP;AACD,GAJD,CAba,CAkBb;;;AACA,QAAME,UAAU,GAAG,MAAOC,EAAP,IAAY;AAC7B,UAAMJ,KAAK,CAAE,+BAA8BI,EAAG,EAAnC,EAAqC;AAC9CC,MAAAA,MAAM,EAAC;AADuC,KAArC,CAAX;AAGAV,IAAAA,QAAQ,CAACD,KAAK,CAACY,MAAN,CAAcC,IAAD,IAAQA,IAAI,CAACH,EAAL,KAAUA,EAA/B,CAAD,CAAR;AACD,GALD,CAnBa,CA0Bb;;;AACA,QAAMI,cAAc,GAAIJ,EAAD,IAAO;AAC5BT,IAAAA,QAAQ,CAACD,KAAK,CAACe,GAAN,CAAWF,IAAD,IAASA,IAAI,CAACH,EAAL,KAAYA,EAAZ,GAC1B,EAAE,GAAGG,IAAL;AAAUG,MAAAA,QAAQ,EAAE,CAACH,IAAI,CAACG;AAA1B,KAD0B,GACUH,IAD7B,CAAD,CAAR;AAED,GAHD,CA3Ba,CAgCb;;;AACA,QAAMI,OAAO,GAAG,MAAOJ,IAAP,IAAe;AAC7B;AACJ;AACA;AACI,UAAMR,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAAD,EAA+B;AACpDK,MAAAA,MAAM,EAAC,MAD6C;AAEpDO,MAAAA,OAAO,EAAC;AACN,wBAAe;AADT,OAF4C;AAKpDC,MAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAeR,IAAf;AAL+C,KAA/B,CAAvB;AAOA,UAAMN,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACAP,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWO,IAAX,CAAD,CAAR;AACD,GAbD;;AAkBA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAI,MAAMR,cAAc,CAAC,CAACD,WAAF,CAArC;AACA,MAAA,OAAO,EAAIA;AADX;AAAA;AAAA;AAAA;AAAA,YADF,EAGGA,WAAW,iBAAI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAImB;AAAlB;AAAA;AAAA;AAAA;AAAA,YAHlB,EAIGjB,KAAK,CAACsB,MAAN,GAAc,CAAd,gBAAiB,QAAC,KAAD;AAAO,MAAA,KAAK,EAAGtB,KAAf;AAClB,MAAA,QAAQ,EAAIS,UADM;AAElB,MAAA,QAAQ,EAAIK;AAFM;AAAA;AAAA;AAAA;AAAA,YAAjB,GAE+B,kBANlC;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GA7DQjB,G;;KAAAA,G;AA+DT,eAAeA,GAAf","sourcesContent":["import { useState, useEffect } from \"react\"\nimport Header from './components/Header'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\nfunction App() {\n  const [showAddTask, setShowAddTask] = useState(false)\n  const [tasks, setTasks] = useState([])\n  useEffect(()=>{\n    const getTasks = async () =>{\n        const tasksFromServer = await fetchTasks()\n        setTasks(tasksFromServer)\n\n    }\n    getTasks()\n  },[])\n\n  //fetch data\n  const fetchTasks = async () =>{\n    const res = await fetch('http://localhost:5000/tasks')\n    const data = await res.json()\n    return data\n  }\n  //Delete Task\n  const deleteTask = async (id)=>{\n    await fetch(`http://localhost:5000/tasks/${id}`,{\n      method:'DELETE',\n    })\n    setTasks(tasks.filter((task)=>task.id!==id))\n  }\n\n  //Toggle Reminder\n  const toggleReminder = (id) =>{\n    setTasks(tasks.map((task)=> task.id === id\n    ? { ...task,reminder: !task.reminder}:task))\n  }\n\n  //Add task\n  const addTask = async (task) =>{\n    /*const id = Math.floor(Math.random()*10000)+1\n    const newTask = {id, ...task}\n    setTasks([...tasks, newTask])*/\n    const res = await fetch('http://localhost:5000/tasks',{\n      method:'POST',\n      headers:{\n        'Content-type':'application/json'\n      },\n      body:JSON.stringify(task)\n    })\n    const data = await res.json()\n    setTasks([...tasks, data])\n  }\n\n \n\n\n  return (\n    <div className=\"container\">\n      <Header onAdd = {() => setShowAddTask(!showAddTask)}\n      showAdd = {showAddTask}/>\n      {showAddTask && <AddTask onAdd = {addTask} />}\n      {tasks.length >0? <Tasks tasks ={tasks} \n      onDelete = {deleteTask} \n      onToggle = {toggleReminder}/> : 'No tasks to show'}\n    </div>\n  );\n}\n\nexport default App; \n\n"]},"metadata":{},"sourceType":"module"}